<?php

namespace DoctrineProxies\__CG__\App\ORM\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class UserList extends \App\ORM\Entity\UserList implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'ref_username', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'name', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'shortname', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'notes', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'createdAt', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'views', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'lastviewed', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'defaultlist', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'private', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'id', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'user', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'template', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'userPerformances'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'ref_username', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'name', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'shortname', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'notes', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'createdAt', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'views', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'lastviewed', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'defaultlist', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'private', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'id', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'user', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'template', '' . "\0" . 'App\\ORM\\Entity\\UserList' . "\0" . 'userPerformances'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (UserList $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setRefUsername($refUsername)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRefUsername', [$refUsername]);

        return parent::setRefUsername($refUsername);
    }

    /**
     * {@inheritDoc}
     */
    public function getRefUsername()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRefUsername', []);

        return parent::getRefUsername();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortname($shortname)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortname', [$shortname]);

        return parent::setShortname($shortname);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortname()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortname', []);

        return parent::getShortname();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotes($notes = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotes', [$notes]);

        return parent::setNotes($notes);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotes', []);

        return parent::getNotes();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setViews($views)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setViews', [$views]);

        return parent::setViews($views);
    }

    /**
     * {@inheritDoc}
     */
    public function getViews()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getViews', []);

        return parent::getViews();
    }

    /**
     * {@inheritDoc}
     */
    public function setLastviewed(\dateTime $lastviewed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLastviewed', [$lastviewed]);

        return parent::setLastviewed($lastviewed);
    }

    /**
     * {@inheritDoc}
     */
    public function getLastviewed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLastviewed', []);

        return parent::getLastviewed();
    }

    /**
     * {@inheritDoc}
     */
    public function setDefaultlist($defaultlist)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDefaultlist', [$defaultlist]);

        return parent::setDefaultlist($defaultlist);
    }

    /**
     * {@inheritDoc}
     */
    public function getDefaultlist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDefaultlist', []);

        return parent::getDefaultlist();
    }

    /**
     * {@inheritDoc}
     */
    public function setPrivate($private = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPrivate', [$private]);

        return parent::setPrivate($private);
    }

    /**
     * {@inheritDoc}
     */
    public function getPrivate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPrivate', []);

        return parent::getPrivate();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\App\ORM\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setTemplate(\App\ORM\Entity\Template $template = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTemplate', [$template]);

        return parent::setTemplate($template);
    }

    /**
     * {@inheritDoc}
     */
    public function getTemplate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTemplate', []);

        return parent::getTemplate();
    }

    /**
     * {@inheritDoc}
     */
    public function addUserPerformance(\App\ORM\Entity\UserPerformance $userPerformance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserPerformance', [$userPerformance]);

        return parent::addUserPerformance($userPerformance);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserPerformance(\App\ORM\Entity\UserPerformance $userPerformance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserPerformance', [$userPerformance]);

        return parent::removeUserPerformance($userPerformance);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserPerformances()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserPerformances', []);

        return parent::getUserPerformances();
    }

}
