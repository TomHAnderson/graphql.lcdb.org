<?php

namespace DoctrineProxies\__CG__\App\ORM\Entity;


/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Performance extends \App\ORM\Entity\Performance implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'date', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'venue', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'city', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'state', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'set1', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'set2', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'set3', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'comment', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'updatedAt', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'createdAt', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'year', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'showsuserid', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'ref_festival', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'festival_lock', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'spotlight_date', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'staffpick_date', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'merge_lock', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'ref_venue', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'changeComment', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'isCompilation', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'title', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'id', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'sources', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'userPerformances', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'artist', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'wantedUsers'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'date', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'venue', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'city', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'state', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'set1', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'set2', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'set3', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'comment', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'updatedAt', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'createdAt', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'year', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'showsuserid', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'ref_festival', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'festival_lock', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'spotlight_date', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'staffpick_date', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'merge_lock', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'ref_venue', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'changeComment', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'isCompilation', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'title', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'id', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'sources', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'userPerformances', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'artist', '' . "\0" . 'App\\ORM\\Entity\\Performance' . "\0" . 'wantedUsers'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Performance $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load(): void
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized(): bool
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized): void
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null): void
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer(): ?\Closure
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null): void
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner(): ?\Closure
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties(): array
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setDate($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDate', [$date]);

        return parent::setDate($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDate', []);

        return parent::getDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setVenue($venue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVenue', [$venue]);

        return parent::setVenue($venue);
    }

    /**
     * {@inheritDoc}
     */
    public function getVenue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVenue', []);

        return parent::getVenue();
    }

    /**
     * {@inheritDoc}
     */
    public function setCity($city)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCity', [$city]);

        return parent::setCity($city);
    }

    /**
     * {@inheritDoc}
     */
    public function getCity()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCity', []);

        return parent::getCity();
    }

    /**
     * {@inheritDoc}
     */
    public function setState($state)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setState', [$state]);

        return parent::setState($state);
    }

    /**
     * {@inheritDoc}
     */
    public function getState()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getState', []);

        return parent::getState();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet1($set1 = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet1', [$set1]);

        return parent::setSet1($set1);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet1', []);

        return parent::getSet1();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet2($set2 = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet2', [$set2]);

        return parent::setSet2($set2);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet2', []);

        return parent::getSet2();
    }

    /**
     * {@inheritDoc}
     */
    public function setSet3($set3 = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSet3', [$set3]);

        return parent::setSet3($set3);
    }

    /**
     * {@inheritDoc}
     */
    public function getSet3()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSet3', []);

        return parent::getSet3();
    }

    /**
     * {@inheritDoc}
     */
    public function setComment($comment = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComment', [$comment]);

        return parent::setComment($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function getComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComment', []);

        return parent::getComment();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setYear($year = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setYear', [$year]);

        return parent::setYear($year);
    }

    /**
     * {@inheritDoc}
     */
    public function getYear()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYear', []);

        return parent::getYear();
    }

    /**
     * {@inheritDoc}
     */
    public function setShowsuserid($showsuserid)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShowsuserid', [$showsuserid]);

        return parent::setShowsuserid($showsuserid);
    }

    /**
     * {@inheritDoc}
     */
    public function getShowsuserid()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShowsuserid', []);

        return parent::getShowsuserid();
    }

    /**
     * {@inheritDoc}
     */
    public function setRefFestival($refFestival)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRefFestival', [$refFestival]);

        return parent::setRefFestival($refFestival);
    }

    /**
     * {@inheritDoc}
     */
    public function getRefFestival()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRefFestival', []);

        return parent::getRefFestival();
    }

    /**
     * {@inheritDoc}
     */
    public function setFestivalLock($festivalLock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFestivalLock', [$festivalLock]);

        return parent::setFestivalLock($festivalLock);
    }

    /**
     * {@inheritDoc}
     */
    public function getFestivalLock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFestivalLock', []);

        return parent::getFestivalLock();
    }

    /**
     * {@inheritDoc}
     */
    public function setSpotlightDate($spotlightDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSpotlightDate', [$spotlightDate]);

        return parent::setSpotlightDate($spotlightDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getSpotlightDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSpotlightDate', []);

        return parent::getSpotlightDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setStaffpickDate($staffpickDate = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStaffpickDate', [$staffpickDate]);

        return parent::setStaffpickDate($staffpickDate);
    }

    /**
     * {@inheritDoc}
     */
    public function getStaffpickDate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStaffpickDate', []);

        return parent::getStaffpickDate();
    }

    /**
     * {@inheritDoc}
     */
    public function setMergeLock($mergeLock)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMergeLock', [$mergeLock]);

        return parent::setMergeLock($mergeLock);
    }

    /**
     * {@inheritDoc}
     */
    public function getMergeLock()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMergeLock', []);

        return parent::getMergeLock();
    }

    /**
     * {@inheritDoc}
     */
    public function setRefVenue($refVenue)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRefVenue', [$refVenue]);

        return parent::setRefVenue($refVenue);
    }

    /**
     * {@inheritDoc}
     */
    public function getRefVenue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRefVenue', []);

        return parent::getRefVenue();
    }

    /**
     * {@inheritDoc}
     */
    public function setChangeComment($changeComment = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChangeComment', [$changeComment]);

        return parent::setChangeComment($changeComment);
    }

    /**
     * {@inheritDoc}
     */
    public function getChangeComment()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChangeComment', []);

        return parent::getChangeComment();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsCompilation($isCompilation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsCompilation', [$isCompilation]);

        return parent::setIsCompilation($isCompilation);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsCompilation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsCompilation', []);

        return parent::getIsCompilation();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function addSource(\App\ORM\Entity\Source $source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addSource', [$source]);

        return parent::addSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function removeSource(\App\ORM\Entity\Source $source)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeSource', [$source]);

        return parent::removeSource($source);
    }

    /**
     * {@inheritDoc}
     */
    public function getSources()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSources', []);

        return parent::getSources();
    }

    /**
     * {@inheritDoc}
     */
    public function addUserPerformance(\App\ORM\Entity\UserPerformance $userPerformance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUserPerformance', [$userPerformance]);

        return parent::addUserPerformance($userPerformance);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUserPerformance(\App\ORM\Entity\UserPerformance $userPerformance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUserPerformance', [$userPerformance]);

        return parent::removeUserPerformance($userPerformance);
    }

    /**
     * {@inheritDoc}
     */
    public function getUserPerformances()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUserPerformances', []);

        return parent::getUserPerformances();
    }

    /**
     * {@inheritDoc}
     */
    public function setArtist(\App\ORM\Entity\Artist $artist)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setArtist', [$artist]);

        return parent::setArtist($artist);
    }

    /**
     * {@inheritDoc}
     */
    public function getArtist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getArtist', []);

        return parent::getArtist();
    }

    /**
     * {@inheritDoc}
     */
    public function addWantedUser(\App\ORM\Entity\User $wantedUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addWantedUser', [$wantedUser]);

        return parent::addWantedUser($wantedUser);
    }

    /**
     * {@inheritDoc}
     */
    public function removeWantedUser(\App\ORM\Entity\User $wantedUser)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeWantedUser', [$wantedUser]);

        return parent::removeWantedUser($wantedUser);
    }

    /**
     * {@inheritDoc}
     */
    public function getWantedUsers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getWantedUsers', []);

        return parent::getWantedUsers();
    }

}
